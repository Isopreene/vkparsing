services:
  db:
    # We use a mariadb image which supports both amd64 & arm64 architecture
    image: mariadb:10-focal
    # If you really want to use MySQL, uncomment the following line
    #image: mysql:8
    command: '--default-authentication-plugin=mysql_native_password'
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'mysqladmin ping -h 127.0.0.1 --password="$$(cat /run/secrets/db-password)" --silent']
      interval: 3s
      retries: 5
      start_period: 30s
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backnet
    environment:
      - MYSQL_DATABASE=vk
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 3306
      - 33060

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    entrypoint: redis-server --appendonly yes
    networks:
      - redis

  celery-worker:
    build: backend
    command: sh -c "
      pip3 install redis
      && celery -A app.celery worker --loglevel=info"
    restart: always
    secrets:
      - db-password
      - vk
      - captcha
      - cloud
    volumes:
      - ./backend:/code
      - ./db:/run
      - db-data:/var/lib/mysql
    networks:
      - backnet
      - frontnet
      - redis

  celery-beat:
    build: backend
    command: >
      sh -c "pip3 install redis
      && celery -A app.celery beat"
    restart: always
    secrets:
      - db-password
      - vk
      - captcha
      - cloud
    volumes:
      - ./backend:/code
      - ./db:/run
      - db-data:/var/lib/mysql
    networks:
      - backnet
      - frontnet
      - redis

  backend:
    build:
      context: backend
      target: builder
    restart: always
    secrets:
      - db-password
      - vk
      - captcha
      - cloud
    ports:
      - 8000:8000
    networks:
      - backnet
      - frontnet
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - "./backend:/code"

  proxy:
    build: proxy
    restart: always
    ports:
      - 80:80
    depends_on: 
      - backend
    networks:
      - frontnet

volumes:
  db-data:

secrets:
  db-password:
    file: db/password.txt
  vk:
    file: db/vk.json
  captcha:
    file: db/captcha.json
  cloud:
    file: db/cloud.txt

networks:
  backnet:
  frontnet:
  redis:
